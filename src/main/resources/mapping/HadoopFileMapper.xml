<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="org.jetbrains.hadoop_netdisk.mapper.HadoopFileMapper">

    <resultMap id="FileResultMap" type="org.jetbrains.hadoop_netdisk.entity.HadoopFile">
        <result column="hash_code" jdbcType="CHAR" property="hashCode" />
        <result column="hdfs_path" jdbcType="VARCHAR" property="hdfsPath" />
        <result column="file_size" jdbcType="DOUBLE" property="fileSize" />
        <result column="upload_date" jdbcType="DATE" property="uploadDate" />
        <result column="is_deleted" jdbcType="BOOLEAN" property="isDeleted" />
        <result column="delete_date" jdbcType="DATE" property="deleteDate" />
        <result column="is_shared" jdbcType="BOOLEAN" property="isShared" />
        <result column="share_date" jdbcType="DATE" property="shareDate" />
        <result column="share_expire_date" jdbcType="DATE" property="shareExpireDate" />
        <result column="share_encrypt" jdbcType="BOOLEAN" property="shareEncrypt" />
        <result column="share_encrypt_code" jdbcType="VARCHAR" property="shareEncryptCode" />
        <result column="download_count" jdbcType="INTEGER" property="downloadCount" />
        <result column="owner" jdbcType="VARCHAR" property="owner" />
    </resultMap>

    <!-- 获取文件详细信息 -->
    <select id="query" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE hash_code = #{hashCode}
    </select>

    <!-- 获取用户文件列表 -->
    <select id="getUserFiles" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE owner = #{username} AND is_deleted = FALSE
    </select>

    <!-- 获取用户删除文件列表 -->
    <select id="getUserDeletedFiles" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE owner = #{username} AND is_deleted = TRUE
    </select>

    <!-- 获取分享文件列表 -->
    <select id="getSharedFiles" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE is_shared = TRUE AND is_deleted = FALSE
    </select>

    <!-- 将分享文件列表按下载次数排序 -->
    <select id="getSharedFilesOrderByDownloadCount" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE is_shared = TRUE AND is_deleted = FALSE
        ORDER BY #{downloadCount} DESC
    </select>

    <!-- 将分享文件列表按分享时间排序 -->
    <select id="getSharedFilesOrderByShareDate" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE is_shared = TRUE AND is_deleted = FALSE
        ORDER BY #{sharedDate}
    </select>

    <!-- 搜索用户文件 -->
    <select id="searchFiles" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE owner = #{username} AND is_deleted = FALSE AND hdfs_path LIKE concat('%', #{query}, '%')
    </select>

    <!-- 搜索已分享文件 -->
    <select id="searchSharedFiles" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE is_shared = TRUE AND is_deleted = FALSE AND hdfs_path LIKE concat('%', #{query}, '%')
    </select>

    <!-- 获取某个用户分享的文件列表 -->
    <select id="getSharedFilesByUsername" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE is_shared = TRUE AND is_deleted = FALSE AND owner = #{usernmae}
    </select>

    <!-- 查询某用户分享的文件数 -->
    <select id="getSharedFilesCount" resultType="INTEGER">
        SELECT count(owner)
        FROM hadoop.files
        WHERE is_shared = TRUE AND owner = #{username}
    </select>

    <!-- 查询某用户分享文件的下载次数总合 -->
    <select id="getTotalDownloadCount" resultType="INTEGER">
        SELECT sum(download_count)
        FROM hadoop.files
        WHERE is_shared = TRUE AND owner = #{username}
    </select>

    <!-- 增加下载次数 -->
    <update id="increaseDownloadCount">
        UPDATE hadoop.files
        SET download_count = download_count + 1
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 插入 -->
    <insert id="insert">
        INSERT INTO hadoop.files(hash_code, hdfs_path, file_size, owner)
        VALUES (#{hashCode}, #{hdfsPath}, #{fileSize}, #{owner})
    </insert>

    <!-- 重命名 -->
    <update id="rename">
        UPDATE hadoop.files
        SET hdfs_path = #{newHdfsPath}
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 将文件标记为删除 -->
    <update id="fakeDelete">
        UPDATE hadoop.files
        SET hdfs_path = #{newHdfsPath},
            is_deleted = TRUE,
            delete_date = now()
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 取消删除标记 -->
    <update id="cancelFakeDelete">
        UPDATE hadoop.files
        SET hdfs_path = #{newHdfsPath},
            is_deleted = FALSE
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 选取某个文件夹下的所有文件 -->
    <select id="getFilesUnderDir" resultMap="FileResultMap">
        SELECT *
        FROM hadoop.files
        WHERE hdfs_path LIKE concat(#{currentPath}, '%')
    </select>

    <!-- 删除文件记录 -->
    <delete id="realDelete">
        DELETE FROM hadoop.files
        WHERE hash_code = #{hashCode}
    </delete>

    <!-- 分享 -->
    <update id="share">
        UPDATE hadoop.files
        SET
            is_shared = TRUE,
            share_date = now(),
            share_expire_date = date_add(now(), INTERVAL #{shareExpireDay} DAY)
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 加密分享 -->
    <update id="shareWithEncrypt">
        UPDATE hadoop.files
        SET
            is_shared = TRUE,
            share_date = now(),
            share_expire_date = date_add(now(), INTERVAL #{shareExpireDay} DAY),
            share_encrypt = TRUE,
            share_encrypt_code = #{shareEncryptCode}
        WHERE hash_code = #{hashCode}
    </update>

    <!-- 收藏文文件 -->
</mapper>